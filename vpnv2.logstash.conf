#vpnv2.logstash.conf
#nova versão para ingestão dos logs da VPN, com campos mapeados e tratamento de dados

input {
  http {}
#   stdin { }
}

filter {
  ruby {
    code => '
      logger.info("Message: ", event.get("[message]"))
    '
  }
  csv {
    skip_empty_rows => true
    columns => ["ComputerName","ServiceName","RecordDate","RecordTime","PacketType","UserName","FQUser","CalledStationID","CallingStationID","CallbackNumber","FramedIPAddress","NASIdentifier","NASIPAddress","NASPort","ClientVendor","ClientIPAddress","ClientFriendlyName","EventTimestamp","PortLimit","NASPortType","ConnectInfo","FramedProtocol","ServiceType","AuthenticationType","PolicyName","ReasonCode","Class","SessionTimeout","IdleTimeout","TerminationAction","EAPFriendlyName","AcctStatusType","AcctDelayTime","AcctInputOctets","AcctOutputOctets","AcctSessionID","AcctAuthentic","AcctSessionTime","AcctInputPackets","AcctOutputPackets","AcctTerminateCause","AcctMultiSsnID","AcctLinkCount","AcctInterimInterval","TunnelType","TunnelMediumType","TunnelClientEndpt","TunnelServerEndpt","AcctTunnelConn","TunnelPvtGroupID","TunnelAssigntmentID","TunnelPreference","MSAcctAuthType","MSAcctEAPType","MSRASVersion","MSRASVendor","MSCHAPError","MSCHAPDomain","MSMPPEEncryptionTypes","MSMPPEEncryptionPolicy","ProxyPolicyName","ProviderType","ProviderName","RemoteServerAddress","MSRASClientName","MSRASClientVersion"]
  }

#   mutate {
#     add_field => [ "log_timestamp", "%{RecordDate} %{RecordTime}" ]
#   }
#   ## Set the Event Timesteamp from the log
#   # 03/24/2020,00:00:25
#   if [RecordDate] =~ "\d{8}" {
#     date {
#       match => [ "log_timestamp", "YYYYMMdd HH:mm:ss" ]
#         timezone => "America/Sao_Paulo"
#     }
#   } else if [RecordDate] =~ "\d{4}-\d{2}-\d{2}" {
#     date {
#       match => [ "log_timestamp", "YYYY-MM-dd HH:mm:ss" ]
#         timezone => "America/Sao_Paulo"
#     }
#   } else if [RecordDate] =~ "\d{2}-\d{2}-\d{4}" {
#     date {
#       match => [ "log_timestamp", "MM-dd-YYYY HH:mm:ss" ]
#         timezone => "America/Sao_Paulo"
#     }
#   }

#   if ![CallingStationID] {

#     mutate {
#       gsub => [ "FQUser", "([\\])", "\1\1" ]
#     }

#     elasticsearch {
#       hosts => ["http://localhost:9200"]
#       index => "rras-vpn*"
#       query_template => "..\config\vpnv2.lookup_query.json"
#       fields => { 
#         "MSRASClientName" => "Source_MSRASClientName"
#         "FQUser" => "Source_FQUser"
#         "UserName" => "Source_UserName"
#         "TunnelClientEndpt" => "Source_TunnelClientEndpt"
#         "CallingStationID" => "Source_CallingStationID"
#         "[@metadata][_id]" => "Source_ID"
#         "message" => "Source_message"
#       }
#     }

#     if "_elasticsearch_lookup_failure" not in [tags] {

#       mutate {
#         gsub => [ "FQUser", "[\\]([\\])", "\1" ]
#       }

#       ruby {
#         code => '
#           sourceUser = event.get("Source_UserName");
#           sourceFQ = event.get("Source_FQUser");
#           thisFQ = event.get("FQUser");

#           if thisFQ.nil?
#             if !sourceFQ.nil?
#               nome = sourceFQ.downcase;
#             elsif !sourceUser.nil?
#               nome = sourceUser.downcase;
#             end
#           else
#             nome = thisFQ.downcase;
#           end

#           event.set("LoginCredential", nome);

#           sourceCalling = event.get("Source_CallingStationID")
#           sourceEndpt = event.get("Source_TunnelClientEndpt")

#           if !sourceCalling.nil?
#             source = sourceCalling.to_s;
#           elsif !sourceEndpt.nil?
#             source = sourceEndpt.to_s;
#           end

#           event.set("SourceIP", source);
#         '
#       }

#     }


#   } else {
#     ruby {
#       code => '
#         thisFQ = event.get("FQUser");
#         thisUser = event.get("UserName");

#         if thisFQ.nil?
#           if !thisUser.nil?
#             nome = thisUser.downcase;
#           end
#         else
#           nome = thisFQ.downcase;
#         end

#         event.set("LoginCredential", nome);

#         event.set("SourceIP", event.get("CallingStationID"));
#       '
#     }
#   }

#   mutate {
#     convert => {
#       "@version" => "integer"
#       "AcctAuthentic" => "integer"
#       "AcctDelayTime" => "integer"
#       "AcctInputOctets" => "integer"
#       "AcctInputPackets" => "integer"
#       "AcctLinkCount" => "integer"
#       "AcctMultiSsnID" => "integer"
#       "AcctOutputOctets" => "integer"
#       "AcctOutputPackets" => "integer"
#       "AcctSessionID" => "integer"
#       "AcctSessionTime" => "integer"
#       "AcctStatusType" => "integer"
#       "AcctTerminateCause" => "integer"
#       "AuthenticationType" => "integer"
#       "EventTimestamp" => "integer"
#       "FramedProtocol" => "integer"
#       "IdleTimeout" => "integer"
#       "MSMPPEEncryptionTypes" => "integer"
#       "MSMPPEEncryptionPolicy" => "integer"
#       "MSRASVendor" => "integer"
#       "NASPort" => "integer"
#       "NASPortType" => "integer"
#       "PacketType" => "integer"
#       "ProviderType" => "integer"
#       "ReasonCode" => "integer"
#       "ServiceType" => "integer"
#       "TunnelMediumType" => "integer"
#       "TunnelType" => "integer"
#     }
#   }

#   ruby {
#     code => '
#       code = event.get("ReasonCode");
#       packet = event.get("PacketType");
#       acctype = event.get("AcctStatusType");
#       time = event.get("AcctSessionTime");
#       termCause = event.get("AcctTerminateCause");

#       if ! time.nil?
#         if time == 0
#           sessionTime = "Nao disponivel";
#         elsif time > 3600
#           sessionTime = (time / 60 / 60).to_s + " horas, " + (time / 60 % 60).to_s + " minutos e " + (time % 60).to_s + " segundos";
#         elsif time > 60
#           sessionTime = (time / 60 % 60).to_s + " minutos e " + (time % 60).to_s + " segundos";
#         else
#           sessionTime = time.to_s + " segundos";
#         end
#       end

#       case code
#       when 0
#         if packet == 1
#           connectionInfo = "Solicitação de Conexão";
#         else
#           if acctype == 1
#             connectionInfo = "Início de Conexão";
#           elsif acctype == 2
#             TERMINATION_CAUSE = {
#               1 => "Solicitação do Usuário",
#               2 => "Perda de Sinal",
#               3 => "Perda de Serviço",
#               4 => "Tempo Limite de Inatividade",
#               5 => "Tempo Limite da Sessão",
#               6 => "Reset Administrativo",
#               7 => "Reboot Administrativo",
#               8 => "Erro de Porta",
#               9 => "Erro do NAS",
#               10 => "Solicitação do NAS",
#               11 => "Reboot do NAS",
#               12 => "Porta Desnecessária",
#               13 => "Porta Preemptada",
#               14 => "Porta Suspensa",
#               15 => "Serviço Indisponível",
#               16 => "Chamada de Retorno",
#               17 => "Erro do Usário",
#               18 => "Solicitado pelo Host"
#             }
#             connectionInfo = "Fim da Conexão. Causa: " + TERMINATION_CAUSE[termCause] + " | Tempo de Sessão: " + sessionTime;
#           else
#             connectionInfo = "Início de Conexão com Sucesso";
#           end
#         end
#       when 1..300
#         CONNECTION_INFO = {
#           1 => "REFUSED: INTERNAL_ERROR",
#           2 => "REFUSED: ACCESS_DENIED",
#           3 => "REFUSED: MALFORMED_REQUEST",
#           4 => "REFUSED: GLOBAL_CATALOG_UNAVAILABLE",
#           5 => "REFUSED: DOMAIN_UNAVAILABLE",
#           6 => "REFUSED: SERVER_UNAVAILABLE",
#           7 => "REFUSED: NO_SUCH_DOMAIN",
#           8 => "REFUSED: NO_SUCH_USER",
#           9 => "REFUSED: EXTENSION_DISCARD",
#           16 => "REFUSED: AUTH_FAILURE",
#           17 => "REFUSED: CHANGE_PASSWORD_FAILURE",
#           18 => "REFUSED: UNSUPPORTED_AUTH_TYPE",
#           19 => "REFUSED: NO_CLEARTEXT_PASSWORD",
#           20 => "REFUSED: LM_NOT_ALLOWED",
#           21 => "REFUSED: EXTENSION_REJECT",
#           22 => "REFUSED: EAP_NEGOTIATION_FAILED",
#           23 => "REFUSED: UNEXPECTED_EAP_ERROR",
#           32 => "REFUSED: LOCAL_USERS_ONLY",
#           33 => "REFUSED: PASSWORD_MUST_CHANGE",
#           34 => "REFUSED: ACCOUNT_DISABLED",
#           35 => "REFUSED: ACCOUNT_EXPIRED",
#           36 => "REFUSED: ACCOUNT_LOCKED_OUT",
#           37 => "REFUSED: INVALID_LOGON_HOURS",
#           38 => "REFUSED: ACCOUNT_RESTRICTION",
#           48 => "REFUSED: NO_POLICY_MATCH",
#           49 => "REFUSED: NO_CONNECTION_REQUEST_POLICY_MATCH",
#           64 => "REFUSED: DIALIN_LOCKED_OUT",
#           65 => "REFUSED: DIALIN_DISABLED",
#           66 => "REFUSED: INVALID_AUTH_TYPE",
#           67 => "REFUSED: INVALID_CALLING_STATION",
#           68 => "REFUSED: INVALID_DIALIN_HOURS",
#           69 => "REFUSED: INVALID_CALLED_STATION",
#           70 => "REFUSED: INVALID_PORT_TYPE",
#           71 => "REFUSED: DIALIN_RESTRICTION",
#           72 => "REFUSED: CPW_NOT_ALLOWED",
#           73 => "REFUSED: INVALID_CERT_EKU",
#           80 => "REFUSED: NO_RECORD",
#           96 => "REFUSED: SESSION_TIMEOUT",
#           97 => "REFUSED: UNEXPECTED_REQUEST",
#           112 => "REFUSED: PROXY_REJECT",
#           113 => "REFUSED: PROXY_UNKNOWN_GROUP",
#           114 => "REFUSED: PROXY_UNKNOWN_SERVER",
#           115 => "REFUSED: PROXY_PACKET_TOO_LONG",
#           116 => "REFUSED: PROXY_SEND_ERROR",
#           117 => "REFUSED: PROXY_TIMEOUT",
#           118 => "REFUSED: PROXY_MALFORMED_RESPONSE",
#           256 => "REFUSED: CRYPT_E_REVOKED",
#           257 => "REFUSED: CRYPT_E_NO_REVOCATION_DLL",
#           258 => "REFUSED: CRYPT_E_NO_REVOCATION_CHECK",
#           259 => "REFUSED: CRYPT_E_REVOCATION_OFFLINE",
#           260 => "REFUSED: SEC_E_MESSAGE_ALTERED",
#           261 => "REFUSED: SEC_E_NO_AUTHENTICATING_AUTHORITY",
#           262 => "REFUSED: SEC_E_INCOMPLETE_MESSAGE",
#           263 => "REFUSED: SEC_E_INCOMPLETE_CREDENTIALS",
#           264 => "REFUSED: SEC_E_TIME_SKEW",
#           265 => "REFUSED: SEC_E_UNTRUSTED_ROOT",
#           266 => "REFUSED: SEC_E_ILLEGAL_MESSAGE",
#           267 => "REFUSED: SEC_E_CERT_WRONG_USAGE",
#           268 => "REFUSED: SEC_E_CERT_EXPIRED",
#           269 => "REFUSED: SEC_E_ALGORITHM_MISMATCH",
#           270 => "REFUSED: SEC_E_SMARTCARD_LOGON_REQUIRED",
#           271 => "REFUSED: SEC_E_SHUTDOWN_IN_PROGRESS",
#           272 => "REFUSED: SEC_E_MULTIPLE_ACCOUNTS",
#           273 => "REFUSED: TRUST_E_PROVIDER_UNKNOWN",
#           274 => "REFUSED: TRUST_E_ACTION_UNKNOWN",
#           275 => "REFUSED: TRUST_E_SUBJECT_FORM_UNKNOWN",
#           276 => "REFUSED: TRUST_E_SUBJECT_NOT_TRUSTED",
#           277 => "REFUSED: TRUST_E_NOSIGNATURE",
#           278 => "REFUSED: CERT_E_EXPIRED",
#           279 => "REFUSED: CERT_E_VALIDITYPERIODNESTING",
#           280 => "REFUSED: CERT_E_ROLE",
#           281 => "REFUSED: CERT_E_PATHLENCONST",
#           282 => "REFUSED: CERT_E_CRITICAL",
#           283 => "REFUSED: CERT_E_PURPOSE",
#           284 => "REFUSED: CERT_E_ISSUERCHAINING",
#           285 => "REFUSED: CERT_E_MALFORMED",
#           286 => "REFUSED: CERT_E_UNTRUSTEDROOT",
#           287 => "REFUSED: CERT_E_CHAINING",
#           288 => "REFUSED: TRUST_E_FAIL",
#           289 => "REFUSED: CERT_E_REVOKED",
#           290 => "REFUSED: CERT_E_UNTRUSTEDTESTROOT",
#           291 => "REFUSED: CERT_E_REVOCATION_FAILURE",
#           292 => "REFUSED: CERT_E_CN_NO_MATCH",
#           293 => "REFUSED: CERT_E_WRONG_USAGE",
#           294 => "REFUSED: TRUST_E_EXPLICIT_DISTRUST",
#           295 => "REFUSED: CERT_E_UNTRUSTEDCA",
#           296 => "REFUSED: CERT_E_INVALID_POLICY",
#           297 => "REFUSED: CERT_E_INVALID_NAME",
#           298 => "REFUSED: SEC_E_PKINIT_NAME_MISMATCH",
#           299 => "REFUSED: SEC_E_OUT_OF_SEQUENCE",
#           300 => "REFUSED: SEC_E_NO_CREDENTIALS"
#         }
#         connectionInfo = CONNECTION_INFO[code]
#       else
#         connectionInfo = code;
#       end

#       event.set("ConnectionInfo", connectionInfo);
#     '
#   }

#   fingerprint {
#     id => "Duplicate Protection"
#     source => "message"
#     target => "[@metadata][fingerprint]"
#     method => "MURMUR3"
#     remove_field => ["index"]
#   }

#   sleep {
#     time => "1"   # Sleep 1 second
#     every => 10   # on every 10th event
#   }
}

output {
  elasticsearch {
    hosts => ["http://localhost:9200"]
    index => "rras-vpn_v2-%{+YYYY.MM}"
    document_id => "%{[@metadata][fingerprint]}"
  }
#   if ![@metadata][_index] {
    stdout { codec => rubydebug { metadata => true } }
#   }
  
#   file {
#     path => "/Users/c070054/Downloads/logstash-6.8.6/output/%{[@metadata][_index]}"
#   }
}